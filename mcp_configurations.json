{
  "mcp_version": "1.0.0",
  "models": [
    {
      "id": "azure-openai-gpt-35-turbo",
      "name": "Azure OpenAI GPT-3.5 Turbo",
      "type": "llm",
      "provider": "AzureOpenAI",
      "api_details": {
        "api_key_env_var": "AZURE_OAI_KEY",
        "endpoint_env_var": "AZURE_OAI_ENDPOINT",
        "api_version": "2023-12-01-preview",
        "deployment_name_env_var": "AZURE_OAI_LLM_DEPLOYMENT"
      },
      "capabilities": ["text_generation", "intent_recognition", "tool_use_json_output", "chat_completion"]
    },
    {
      "id": "openai-gpt-35-turbo",
      "name": "OpenAI GPT-3.5 Turbo",
      "type": "llm",
      "provider": "OpenAI",
      "api_details": {
        "api_key_env_var": "OPENAI_API_KEY",
        "model_name": "gpt-3.5-turbo"
      },
      "capabilities": ["text_generation", "intent_recognition", "tool_use_json_output", "chat_completion"]
    },
    {
      "id": "anthropic-claude-3-haiku",
      "name": "Anthropic Claude 3 Haiku",
      "type": "llm",
      "provider": "Anthropic",
      "api_details": {
        "api_key_env_var": "ANTHROPIC_API_KEY",
        "model_name": "claude-3-haiku-20240307"
      },
      "capabilities": ["text_generation", "intent_recognition", "tool_use_json_output", "chat_completion"]
    },
    {
      "id": "google-gemini-pro",
      "name": "Google Gemini Pro",
      "type": "llm",
      "provider": "GoogleGemini",
      "api_details": {
        "api_key_env_var": "GEMINI_API_KEY",
        "model_name": "gemini-pro"
      },
      "capabilities": ["text_generation", "intent_recognition", "tool_use_json_output", "content_generation"]
    },
    {
      "id": "huggingface-gpt2-local",
      "name": "HuggingFace GPT-2 (Local)",
      "type": "llm",
      "provider": "HuggingFace",
      "api_details": {
        "model_name_or_path": "gpt2",
        "task": "text-generation",
        "device_env_var": "HF_DEVICE"
      },
      "capabilities": ["text_generation", "intent_recognition_basic"]
    }
  ],
  "skills": [
    {
      "id": "realtime_data_processor",
      "name": "Real-time Data Processor Skill",
      "description": "Processes, validates, and transforms real-time data streams.",
      "handler_module": "custom_mcp_1",
      "handler_class_or_function": "RealTimeStreamingMCP.process_stream_data",
      "parameters": [
        {
          "name": "raw_data_json",
          "type": "string",
          "format": "json",
          "description": "JSON string representing a list of data items to be processed.",
          "is_required": true
        }
      ],
      "expected_context": ["streaming_data_input_schema"],
      "output_schema": {
        "type": "object",
        "properties": {
          "status": {"type": "string", "enum": ["success", "partial_success", "failure"]},
          "processed_count": {"type": "integer"},
          "total_items": {"type": "integer"},
          "errors": {"type": "array", "items": {"type": "string"}}
        },
        "description": "Summary of the stream processing. Processed data is handled by callbacks."
      }
    },
    {
      "id": "federated_model_aggregator",
      "name": "Federated Model Aggregator Skill",
      "description": "Manages rounds of federated learning and aggregates model updates.",
      "handler_module": "custom_mcp_2",
      "handler_class_or_function": "FederatedLearningMCP",
      "parameters": [
         {
          "name": "action",
          "type": "string",
          "enum": ["start_new_round", "submit_model_update", "aggregate_updates", "get_global_model"],
          "description": "The specific federated learning action to perform.",
          "is_required": true
        },
        {
          "name": "round_id",
          "type": "integer",
          "description": "Identifier for the learning round (required for start_new_round, submit_model_update, aggregate_updates).",
          "is_required": false
        },
        {
          "name": "participant_id",
          "type": "string",
          "description": "Unique ID for the participant submitting an update (required for submit_model_update).",
          "is_required": false
        },
        {
          "name": "model_update_json",
          "type": "string",
          "format": "json",
          "description": "JSON string of the model update (required for submit_model_update).",
          "is_required": false
        }
      ],
      "expected_context": ["model_update_input_schema"],
      "output_schema": {
        "type": "object",
        "properties": {
          "status": {"type": "string"},
          "message": {"type": "string"},
          "current_round": {"type": "integer"},
          "global_model_parameters": {"type": "object", "description": "Current global model parameters (structure varies)."}
        },
        "description": "Result of the federated learning action."
      }
    },
    {
      "id": "robust_message_handler",
      "name": "Robust Message Handler Skill",
      "description": "Processes messages with retry logic and DLQ integration for failures.",
      "handler_module": "custom_mcp_3",
      "handler_class_or_function": "RobustMCP.process_message",
      "parameters": [
        {
          "name": "message_json",
          "type": "string",
          "format": "json",
          "description": "JSON string representing the message to be processed.",
          "is_required": true
        }
      ],
      "expected_context": ["message_processing_input_schema"],
      "output_schema": {
        "type": "object",
        "properties": {
          "status": {"type": "string", "enum": ["success", "dlq_sent", "processing_error"]},
          "message_id": {"type": "string"},
          "details": {"type": "string"}
        },
        "description": "Outcome of the message processing attempt."
      }
    }
  ],
  "context_types": [
    {
      "id": "user_query_context",
      "description": "Represents the raw query or instruction from the user.",
      "schema": {
        "type": "object",
        "properties": {
          "query_text": {"type": "string"},
          "timestamp": {"type": "string", "format": "date-time"},
          "user_id": {"type": "string"}
        },
        "required": ["query_text"]
      }
    },
    {
      "id": "factual_memory_snapshot",
      "description": "A snapshot of the agent's factual memory.",
      "schema": {
        "type": "object",
        "additionalProperties": {"type": "string"},
        "description": "Key-value store of facts."
      }
    },
    {
      "id": "procedural_memory_snapshot",
      "description": "A snapshot of the agent's procedural memory.",
      "schema": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "properties": {
            "steps": {"type": "array", "items": {"type": "string"}},
            "last_used_timestamp": {"type": "number"}
          }
        },
        "description": "Key-value store of tasks and their procedures."
      }
    },
    {
      "id": "streaming_data_input_schema",
      "description": "Defines the expected structure for items in a data stream.",
      "schema": {
        "type": "object",
        "properties": {
          "sensor_id": {"type": "string"},
          "timestamp": {"type": "integer"},
          "value": {"type": "number"},
          "metadata": {"type": "object"}
        },
        "required": ["sensor_id", "value"]
      }
    },
    {
      "id": "model_update_input_schema",
      "description": "Defines the structure for model updates in federated learning.",
      "schema": {
        "type": "object",
        "properties": {
          "weights_delta": {"type": "array", "items": {"type": "number"}},
          "bias_delta": {"type": "number"},
          "data_samples_count": {"type": "integer"}
        },
        "required": ["weights_delta", "bias_delta", "data_samples_count"]
      }
    },
    {
      "id": "message_processing_input_schema",
      "description": "Defines the structure for messages to be processed robustly.",
      "schema": {
        "type": "object",
        "properties": {
          "id": {"type": "string"},
          "payload": {"type": "object"},
          "metadata": {"type": "object"}
        },
        "required": ["id", "payload"]
      }
    }
  ]
}
